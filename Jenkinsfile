// https://www.jenkins.io/doc/book/pipeline/docker/
pipeline {
    agent {
        docker { image 'piersfinlayson/openapi-gen-amd64:0.0.1' }
    }
    stages {
        stage('Auto-gen') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github.packom', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        cd ~/builds && \
                        git clone https://packom:$PASSWORD@github.com/packom/pca9956b-api && \
                        java -jar ~/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar generate -i ./pca9956b-api/api/openapi.yaml -g rust-server -o ./pca9956b-api
                        cd pca9956b-api && \
                        echo "# pca9956b-api

pca9956b-api is an HTTP RESTful API designed to control a PCA9956B IC bus.  This repo includes:
- An [API specification](https://github.com/packom/pca9956b-api/blob/master/api/openapi.yaml) in [OpenAPI format](https://github.com/OAI/OpenAPI-Specification/).
- Skeleton client and server implementations in [Rust](https://www.rust-lang.org/).

A fully-featured server implementation for Linux, in Rust, can be found at https://github.com/packom/pca9956b.

The text below was automatically generated by the openapi-generator.
" > /tmp/README.md && \
                        cat ./README.md >> /tmp/README.md && \
                        cp /tmp/README.md ./ && \
                        echo "[package]
name = \\"pca9956b-api\\"
version = \\"0.1.1\\"
authors = [\\"Piers Finlayson <piers@packom.net>\\"]
edition = \\"2018\\"
license = \\"GPL-3.0-or-later\\"
repository = \\"https://github.com/packom/pca9956b-api\\"
documentation = \\"https://github.com/packom/pca9956b-api\\"
homepage = \\"https://github.com/packom/pca9956b-api\\"
description = \\"HTTP RESTful API and skeleton server/client implement for I2C bus control\\"
readme = \\"README.md\\"
keywords = [\\"i2c\\",\\"bus\\",\\"openapi\\",\\"swagger\\",\\"http\\"]
categories = [\\"api-bindings\\",\\"hardware-support\\",\\"network-programming\\",\\"embedded\\",\\"web-programming\\"]
" > /tmp/Cargo.toml && \
                        tail -n +9 ./Cargo.toml >> /tmp/Cargo.toml && \
                        cp /tmp/Cargo.toml ./ && \
                        find examples -name *.rs -print0 | xargs -0 sed -i 's/openapi_client/pca9956b_api/' && \
                        echo """#[derive(Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
#[cfg_attr(feature = \\"conversion\\", derive(frunk::LabelledGeneric))]
pub struct LedInfoArray(Vec<LedInfo>);

impl ::std::convert::From<Vec<LedInfo>> for LedInfoArray {
    fn from(x: Vec<LedInfo>) -> Self {
        LedInfoArray(x)
    }
}

impl ::std::convert::From<LedInfoArray> for Vec<LedInfo> {
    fn from(x: LedInfoArray) -> Self {
        x.0
    }
}

impl ::std::iter::FromIterator<LedInfo> for LedInfoArray {
    fn from_iter<U: IntoIterator<Item=LedInfo>>(u: U) -> Self {
        LedInfoArray(Vec::<LedInfo>::from_iter(u))
    }
}

impl ::std::iter::IntoIterator for LedInfoArray {
    type Item = LedInfo;
    type IntoIter = ::std::vec::IntoIter<LedInfo>;

    fn into_iter(self) -> Self::IntoIter {
        self.0.into_iter()
    }
}

impl<'a> ::std::iter::IntoIterator for &'a LedInfoArray {
    type Item = &'a LedInfo;
    type IntoIter = ::std::slice::Iter<'a, LedInfo>;

    fn into_iter(self) -> Self::IntoIter {
        (&self.0).into_iter()
    }
}

impl<'a> ::std::iter::IntoIterator for &'a mut LedInfoArray {
    type Item = &'a mut LedInfo;
    type IntoIter = ::std::slice::IterMut<'a, LedInfo>;

    fn into_iter(self) -> Self::IntoIter {
        (&mut self.0).into_iter()
    }
}

impl ::std::ops::Deref for LedInfoArray {
    type Target = Vec<LedInfo>;
    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl ::std::ops::DerefMut for LedInfoArray {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}""" >> src/models.rs
                    '''
                }
            }
        }
        stage('Build') {
            steps {
                sh '''
                    cd ~/builds/pca9956b-api && \
                    cargo build
                '''
            }
        }
        stage('Test') {
            steps {
                sh '''
                    cd ~/builds/pca9956b-api && \
                    cargo test
                '''
            }
        }
        stage('Check in') {
            steps {
                sh '''
                    cd ~/builds/pca9956b-api && \
                    git config --global user.email "piers@packom.net" && \
                    git config --global user.name "Piers Finlayson" && \
                    git status && \
                    git diff && \
                    git diff -- . ':(exclude)README.md' > /tmp/diff && \
                    cat /tmp/diff
                    if [ `stat --printf="%s" /tmp/diff` != 0 ] ; then git add -A && git commit -m "Checking in newly autogenerated version" && git push ; else echo "No changes" ; fi
                '''
            }
        }
    }
}
